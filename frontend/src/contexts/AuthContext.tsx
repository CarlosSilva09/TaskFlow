/**
 * Contexto de Autentica√ß√£o da Aplica√ß√£o
 * Gerencia estado global de login, logout e dados do usu√°rio
 */
import React, { createContext, useContext, useState, useEffect } from 'react';
import type { ReactNode } from 'react';
import type { User } from '../types';
import { apiService } from '../services/api';

/**
 * Interface que define o tipo do contexto de autentica√ß√£o
 * Especifica todas as propriedades e m√©todos dispon√≠veis
 */
interface AuthContextType {
  user: User | null; // Dados do usu√°rio logado ou null se n√£o autenticado
  token: string | null; // Token JWT de autentica√ß√£o
  isLoading: boolean; // Estado de carregamento da autentica√ß√£o
  login: (email: string, password: string) => Promise<void>; // Fun√ß√£o para fazer login
  register: (name: string, email: string, password: string) => Promise<void>; // Fun√ß√£o para registro
  logout: () => void; // Fun√ß√£o para fazer logout
  isAuthenticated: boolean; // Status de autentica√ß√£o do usu√°rio
}

/**
 * Cria√ß√£o do contexto React para autentica√ß√£o
 * Inicializado como undefined para for√ßar uso dentro do Provider
 */
const AuthContext = createContext<AuthContextType | undefined>(undefined);

/**
 * Hook personalizado para usar o contexto de autentica√ß√£o
 * Garante que seja usado apenas dentro do AuthProvider
 */
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

/**
 * Props do componente AuthProvider
 */
interface AuthProviderProps {
  children: ReactNode; // Componentes filhos que ter√£o acesso ao contexto
}

/**
 * Provedor do contexto de autentica√ß√£o
 * Gerencia todo o estado relacionado √† autentica√ß√£o do usu√°rio
 */
export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  // Estado do usu√°rio logado
  const [user, setUser] = useState<User | null>(null);
  
  // Estado do token de autentica√ß√£o (busca inicial do localStorage)
  const [token, setToken] = useState<string | null>(localStorage.getItem('token'));
  
  // Estado de carregamento durante inicializa√ß√£o
  const [isLoading, setIsLoading] = useState(true);

  // Computed property para verificar se o usu√°rio est√° autenticado
  const isAuthenticated = !!token && !!user;

  /**
   * Effect para inicializar a autentica√ß√£o quando a aplica√ß√£o carrega
   * Verifica se existe token v√°lido no localStorage
   */
  useEffect(() => {
    const initAuth = async () => {
      const storedToken = localStorage.getItem('token');
      const storedUser = localStorage.getItem('user');

      // Se existem dados salvos no localStorage
      if (storedToken && storedUser) {
        try {
          // Restaura o estado da autentica√ß√£o
          setToken(storedToken);
          setUser(JSON.parse(storedUser));
          
          // Verifica se o token ainda √© v√°lido fazendo uma requisi√ß√£o
          await apiService.getProfile();
        } catch (error) {
          console.error('Token validation failed:', error);
          // Se o token √© inv√°lido, faz logout
          logout();
        }
      }
      // Finaliza o carregamento inicial
      setIsLoading(false);
    };

    initAuth();
  }, []); // Array vazio = executa apenas uma vez na montagem

  /**
   * Fun√ß√£o para realizar login do usu√°rio
   * @param email - Email do usu√°rio
   * @param password - Senha do usu√°rio
   */
  const login = async (email: string, password: string) => {
    try {
      console.log('üîë Iniciando login...');
      
      // Chama a API de login
      const response = await apiService.login({ email, password });
      console.log('‚úÖ Resposta do login:', response);
      
      const { token: newToken, user: newUser } = response;

      console.log('üíæ Salvando token e usu√°rio...');
      
      // Atualiza o estado da aplica√ß√£o
      setToken(newToken);
      setUser(newUser);
      
      // Persiste os dados no localStorage para manter login entre sess√µes
      localStorage.setItem('token', newToken);
      localStorage.setItem('user', JSON.stringify(newUser));
      
      console.log('‚úÖ Login conclu√≠do com sucesso!');
    } catch (error) {
      console.error('‚ùå Erro no login:', error);
      throw error; // Repassa o erro para o componente que chamou
    }
  };

  /**
   * Fun√ß√£o para registrar novo usu√°rio
   * @param name - Nome do usu√°rio
   * @param email - Email do usu√°rio
   * @param password - Senha do usu√°rio
   */
  const register = async (name: string, email: string, password: string) => {
    try {
      // Chama a API de registro
      const response = await apiService.register({ name, email, password });
      const { token: newToken, user: newUser } = response;

      // Atualiza estado e localStorage (mesmo processo do login)
      setToken(newToken);
      setUser(newUser);
      localStorage.setItem('token', newToken);
      localStorage.setItem('user', JSON.stringify(newUser));
    } catch (error) {
      throw error; // Repassa o erro para o componente que chamou
    }
  };

  /**
   * Fun√ß√£o para fazer logout do usu√°rio
   * Limpa todos os dados de autentica√ß√£o
   */
  const logout = () => {
    // Limpa o estado da aplica√ß√£o
    setToken(null);
    setUser(null);
    
    // Remove dados do localStorage
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  };

  /**
   * Objeto com todos os valores do contexto
   * Ser√° disponibilizado para todos os componentes filhos
   */
  const value = {
    user,
    token,
    isLoading,
    login,
    register,
    logout,
    isAuthenticated,
  };

  // Renderiza o Provider com o valor do contexto
  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
