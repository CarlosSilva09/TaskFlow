import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import { UserModel } from '../models/User';
import { AuthToken, UserResponse, ApiResponse } from '../types';

/**
 * Interface para Request autenticada
 */
export interface AuthenticatedRequest extends Request {
  user?: UserResponse;
}

/**
 *     if (is    if (isTokenExpiringSoon(token, 30)) {
      const newToken = generateToken({
        userId: req.user.id,
        name: req.user.name,
        email: req.user.email
      });

      // Adicionar novo token no header de resposta
      res.setHeader('X-New-Token', newToken);
      
      console.log('üîÑ Token renovado para usu√°rio:', req.user.name);ngSoon(token, 30)) {
      const newToken = generateToken({
        userId: req.user.id,
        name: req.user.name,
        email: req.user.email
      });

      // Adicionar novo token no header de resposta
      res.setHeader('X-New-Token', newToken);
      
      console.log('üîÑ Token renovado para usu√°rio:', req.user.name);de autentica√ß√£o JWT
 * Verifica se o token JWT √© v√°lido e adiciona o usu√°rio ao request
 * 
 * @param req - Request object
 * @param res - Response object
 * @param next - Next function
 */
export const authenticateToken = async (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

    if (!token) {
      console.log('‚ùå Token n√£o fornecido');
      res.status(401).json({
        success: false,
        message: 'Token de acesso requerido'
      } as ApiResponse);
      return;
    }

    // Verificar se JWT_SECRET est√° configurado
    const jwtSecret = process.env.JWT_SECRET;
    if (!jwtSecret) {
      console.error('‚ùå JWT_SECRET n√£o configurado');
      res.status(500).json({
        success: false,
        message: 'Configura√ß√£o do servidor inv√°lida'
      } as ApiResponse);
      return;
    }

    try {
      // Verificar e decodificar o token
      const decoded = jwt.verify(token, jwtSecret) as AuthToken;
      console.log('üîê Token decodificado para usu√°rio:', decoded.userId);

      // Verificar se o usu√°rio ainda existe no banco
      const user = await UserModel.findById(decoded.userId);

      if (!user) {
        console.log('‚ùå Usu√°rio n√£o encontrado no banco:', decoded.userId);
        res.status(401).json({
          success: false,
          message: 'Usu√°rio n√£o encontrado'
        } as ApiResponse);
        return;
      }

      // Adicionar usu√°rio ao request
      req.user = user;
      console.log('‚úÖ Usu√°rio autenticado:', user.name);

      next();
    } catch (jwtError: any) {
      console.log('‚ùå Erro na verifica√ß√£o do token:', jwtError.message);

      if (jwtError.name === 'TokenExpiredError') {
        res.status(401).json({
          success: false,
          message: 'Token expirado. Fa√ßa login novamente.'
        } as ApiResponse);
        return;
      }

      if (jwtError.name === 'JsonWebTokenError') {
        res.status(401).json({
          success: false,
          message: 'Token inv√°lido'
        } as ApiResponse);
        return;
      }

      if (jwtError.name === 'NotBeforeError') {
        res.status(401).json({
          success: false,
          message: 'Token ainda n√£o √© v√°lido'
        } as ApiResponse);
        return;
      }

      // Erro gen√©rico de token
      res.status(401).json({
        success: false,
        message: 'Token inv√°lido'
      } as ApiResponse);
      return;
    }
  } catch (error: any) {
    console.error('‚ùå Erro interno no middleware de autentica√ß√£o:', error.message);
    res.status(500).json({
      success: false,
      message: 'Erro interno do servidor'
    } as ApiResponse);
  }
};

/**
 * Middleware opcional de autentica√ß√£o
 * Adiciona o usu√°rio ao request se o token for v√°lido, mas n√£o falha se n√£o houver token
 * 
 * @param req - Request object
 * @param res - Response object
 * @param next - Next function
 */
export const optionalAuth = async (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (!token) {
      // Sem token, mas continua
      next();
      return;
    }

    const jwtSecret = process.env.JWT_SECRET;
    if (!jwtSecret) {
      // Configura√ß√£o inv√°lida, mas continua sem autentica√ß√£o
      next();
      return;
    }

    try {
      const decoded = jwt.verify(token, jwtSecret) as AuthToken;
      const user = await UserModel.findById(decoded.userId);

      if (user) {
        req.user = user;
        console.log('‚úÖ Usu√°rio autenticado opcionalmente:', user.name);
      }
    } catch (jwtError) {
      // Token inv√°lido, mas continua sem autentica√ß√£o
      console.log('‚ö†Ô∏è Token inv√°lido na autentica√ß√£o opcional');
    }

    next();
  } catch (error: any) {
    console.error('‚ùå Erro no middleware de autentica√ß√£o opcional:', error.message);
    // Em caso de erro, continua sem autentica√ß√£o
    next();
  }
};

/**
 * Middleware para verificar se o usu√°rio √© admin
 * Deve ser usado ap√≥s o authenticateToken
 * 
 * @param req - Request object
 * @param res - Response object
 * @param next - Next function
 */
export const requireAdmin = (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): void => {
  if (!req.user) {
    res.status(401).json({
      success: false,
      message: 'Usu√°rio n√£o autenticado'
    } as ApiResponse);
    return;
  }

  // Verificar se o usu√°rio tem privil√©gios de admin
  // Por enquanto, vamos considerar que o usu√°rio com ID 1 √© admin
  // Em uma implementa√ß√£o real, haveria um campo 'role' na tabela users
  if (req.user.id !== 1) {
    res.status(403).json({
      success: false,
      message: 'Acesso negado. Privil√©gios de administrador necess√°rios.'
    } as ApiResponse);
    return;
  }

  console.log('‚úÖ Admin autenticado:', req.user.name);
  next();
};

/**
 * Middleware para verificar se o usu√°rio √© o dono do recurso
 * Verifica se o userId dos par√¢metros corresponde ao usu√°rio autenticado
 * 
 * @param req - Request object
 * @param res - Response object
 * @param next - Next function
 */
export const requireOwnership = (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): void => {
  if (!req.user) {
    res.status(401).json({
      success: false,
      message: 'Usu√°rio n√£o autenticado'
    } as ApiResponse);
    return;
  }

  const resourceUserId = parseInt(req.params.userId);
  
  if (isNaN(resourceUserId)) {
    res.status(400).json({
      success: false,
      message: 'ID de usu√°rio inv√°lido'
    } as ApiResponse);
    return;
  }

  if (req.user.id !== resourceUserId) {
    res.status(403).json({
      success: false,
      message: 'Acesso negado. Voc√™ s√≥ pode acessar seus pr√≥prios recursos.'
    } as ApiResponse);
    return;
  }

  console.log('‚úÖ Propriedade do recurso verificada para usu√°rio:', req.user.name);
  next();
};

/**
 * Middleware para extrair informa√ß√µes do token sem valida√ß√£o completa
 * √ötil para logs e analytics
 * 
 * @param req - Request object
 * @param res - Response object
 * @param next - Next function
 */
export const extractTokenInfo = (
  req: AuthenticatedRequest,
  res: Response,
  next: NextFunction
): void => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (token && process.env.JWT_SECRET) {
      try {
        const decoded = jwt.decode(token) as AuthToken | null;
        if (decoded && decoded.userId) {
          // Adicionar informa√ß√µes do token ao request para logs
          (req as any).tokenInfo = {
            userId: decoded.userId,
            name: decoded.name,
            email: decoded.email,
            exp: decoded.exp,
            iat: decoded.iat
          };
        }
      } catch (error) {
        // Falha silenciosa na extra√ß√£o
      }
    }

    next();
  } catch (error: any) {
    console.error('‚ùå Erro ao extrair informa√ß√µes do token:', error.message);
    next();
  }
};

/**
 * Helper para gerar tokens JWT
 * 
 * @param payload - Dados a serem inclu√≠dos no token
 * @param expiresIn - Tempo de expira√ß√£o
 * @returns string - Token JWT gerado
 */
export const generateToken = (
  payload: { userId: number; name: string; email: string },
  expiresIn: string = '7d'
): string => {
  const jwtSecret = process.env.JWT_SECRET;
  
  if (!jwtSecret) {
    throw new Error('JWT_SECRET n√£o configurado');
  }

  return jwt.sign(payload, jwtSecret, { expiresIn: expiresIn as any });
};

/**
 * Helper para verificar se um token est√° pr√≥ximo do vencimento
 * 
 * @param token - Token JWT
 * @param thresholdMinutes - Minutos antes do vencimento para considerar "pr√≥ximo"
 * @returns boolean - True se est√° pr√≥ximo do vencimento
 */
export const isTokenExpiringSoon = (token: string, thresholdMinutes: number = 30): boolean => {
  try {
    const decoded = jwt.decode(token) as AuthToken | null;
    
    if (!decoded || !decoded.exp) {
      return false;
    }

    const now = Math.floor(Date.now() / 1000);
    const threshold = thresholdMinutes * 60; // converter para segundos
    
    return (decoded.exp - now) <= threshold;
  } catch (error) {
    return false;
  }
};

/**
 * Helper para renovar token se necess√°rio
 * 
 * @param req - Request object
 * @param res - Response object
 * @returns string | null - Novo token se foi renovado
 */
export const refreshTokenIfNeeded = (
  req: AuthenticatedRequest,
  res: Response
): string | null => {
  try {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    
    if (!token || !req.user) {
      return null;
    }

    if (isTokenExpiringSoon(token, 30)) {
      const newToken = generateToken({
        userId: req.user.id,
        name: req.user.name,
        email: req.user.email
      });

      // Adicionar novo token no header de resposta
      res.setHeader('X-New-Token', newToken);
      
      console.log('üîÑ Token renovado para usu√°rio:', req.user.name);
      return newToken;
    }

    return null;
  } catch (error: any) {
    console.error('‚ùå Erro ao renovar token:', error.message);
    return null;
  }
};
