import { Response } from 'express';
import { TodoModel } from '../models/Todo';
import { AuthenticatedRequest } from '../middleware/auth';
import { 
  CreateTodoData, 
  UpdateTodoData, 
  TodoFilters,
  ApiResponse, 
  TodoResponse,
  TodoStats,
  PaginatedResponse,
  HttpStatusCode 
} from '../types';

/**
 * Controlador de Tarefas (TodoController)
 * 
 * Este controlador gerencia todas as opera√ß√µes CRUD (Create, Read, Update, Delete) 
 * relacionadas √†s tarefas dos usu√°rios no sistema.
 * 
 * Funcionalidades principais:
 * - Cria√ß√£o de novas tarefas
 * - Listagem com filtros, busca e pagina√ß√£o
 * - Visualiza√ß√£o de tarefa espec√≠fica
 * - Atualiza√ß√£o de tarefas existentes
 * - Remo√ß√£o de tarefas
 * - Altern√¢ncia de status (conclu√≠da/pendente)
 * - Estat√≠sticas e opera√ß√µes em lote
 * 
 * Seguran√ßa:
 * - Todas as opera√ß√µes requerem autentica√ß√£o JWT
 * - Usu√°rios s√≥ podem acessar suas pr√≥prias tarefas
 * - Valida√ß√£o rigorosa de entrada de dados
 * - Tratamento completo de erros
 */
export class TodoController {
  /**
   * CRIAR NOVA TAREFA
   * 
   * Esta fun√ß√£o permite que um usu√°rio autenticado crie uma nova tarefa
   * no sistema. Realiza valida√ß√µes completas dos dados de entrada.
   * 
   * Fluxo de execu√ß√£o:
   * 1. Verificar autentica√ß√£o do usu√°rio
   * 2. Extrair dados da requisi√ß√£o
   * 3. Validar campos obrigat√≥rios e opcionais
   * 4. Criar tarefa no banco de dados
   * 5. Buscar tarefa criada para confirma√ß√£o
   * 6. Retornar resposta de sucesso com dados da tarefa
   * 
   * @param req - Request autenticada contendo dados da tarefa no body
   * @param res - Response para retornar resultado da opera√ß√£o
   */
  static async create(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      // EXTRAIR DADOS DO USU√ÅRIO AUTENTICADO
      // O middleware authenticateToken j√° validou o token e adicionou user ao request
      // req.user cont√©m: { id, name, email, created_at, updated_at }
      const user = req.user;
      
      // EXTRAIR DADOS DA TAREFA DO BODY DA REQUISI√á√ÉO
      // Desestrutura√ß√£o dos campos esperados no corpo da requisi√ß√£o
      // title: obrigat√≥rio - t√≠tulo da tarefa
      // description: opcional - descri√ß√£o detalhada
      // priority: opcional - prioridade (baixa, media, alta)
      // due_date: opcional - data de vencimento
      const { title, description, priority, due_date }: CreateTodoData = req.body;

      // VERIFICA√á√ÉO DE SEGURAN√áA - USU√ÅRIO AUTENTICADO
      // Esta verifica√ß√£o √© redundante (o middleware j√° fez), mas garante seguran√ßa extra
      // Se por algum motivo o middleware falhou, esta verifica√ß√£o captura o erro
      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido ou expirado']
        } as ApiResponse);
        return; // Interrompe execu√ß√£o da fun√ß√£o
      }

      // LOG DA OPERA√á√ÉO PARA AUDITORIA E DEBUG
      // Registra tentativa de cria√ß√£o com dados (esconde informa√ß√µes sens√≠veis)
      console.log('üìù Tentativa de cria√ß√£o de tarefa:', {
        userId: user.id,
        userEmail: user.email,
        title: title || 'N√ÉO_INFORMADO',
        hasDescription: !!description,
        priority: priority || 'PADR√ÉO',
        hasDueDate: !!due_date
      });

      // ============================================
      // VALIDA√á√ïES DE ENTRADA DE DADOS
      // ============================================

      // VALIDA√á√ÉO 1: T√çTULO OBRIGAT√ìRIO E N√ÉO VAZIO
      // Verifica se t√≠tulo foi fornecido e n√£o √© string vazia ap√≥s trim()
      // trim() remove espa√ßos no in√≠cio e fim da string
      // !title verifica se √© null, undefined ou string vazia
      if (!title || title.trim().length === 0) {
        console.log('‚ùå Valida√ß√£o falhou: t√≠tulo vazio ou n√£o fornecido');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'O t√≠tulo da tarefa √© obrigat√≥rio',
          errors: ['Campo t√≠tulo n√£o pode estar vazio']
        } as ApiResponse);
        return;
      }

      // VALIDA√á√ÉO 2: COMPRIMENTO M√ÅXIMO DO T√çTULO
      // Evita t√≠tulos excessivamente longos que podem causar problemas:
      // - Interface do usu√°rio quebrada
      // - Problemas de performance no banco
      // - Limita√ß√µes de armazenamento
      if (title.length > 200) {
        console.log('‚ùå Valida√ß√£o falhou: t√≠tulo muito longo:', title.length, 'caracteres');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'T√≠tulo n√£o pode ter mais de 200 caracteres',
          errors: [`T√≠tulo tem ${title.length} caracteres. M√°ximo permitido: 200`]
        } as ApiResponse);
        return;
      }

      // VALIDA√á√ÉO 3: COMPRIMENTO M√ÅXIMO DA DESCRI√á√ÉO (SE FORNECIDA)
      // Descri√ß√£o √© opcional, mas se fornecida deve ter limite razo√°vel
      // && operator: s√≥ executa a segunda parte se description existe (n√£o null/undefined)
      if (description && description.length > 1000) {
        console.log('‚ùå Valida√ß√£o falhou: descri√ß√£o muito longa:', description.length, 'caracteres');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Descri√ß√£o n√£o pode ter mais de 1000 caracteres',
          errors: [`Descri√ß√£o tem ${description.length} caracteres. M√°ximo permitido: 1000`]
        } as ApiResponse);
        return;
      }

      // VALIDA√á√ÉO 4: PRIORIDADE V√ÅLIDA (SE FORNECIDA)
      // Verifica se a prioridade est√° dentro dos valores aceitos
      // includes() verifica se o valor existe no array
      if (priority && !['baixa', 'media', 'alta'].includes(priority)) {
        console.log('‚ùå Valida√ß√£o falhou: prioridade inv√°lida:', priority);
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Prioridade deve ser: baixa, media ou alta',
          errors: [`Prioridade "${priority}" n√£o √© v√°lida. Use: baixa, media ou alta`]
        } as ApiResponse);
        return;
      }

      // VALIDA√á√ÉO 5: DATA DE VENCIMENTO V√ÅLIDA (SE FORNECIDA)
      // Verifica se a string de data pode ser convertida para Date v√°lida
      if (due_date) {
        const dueDate = new Date(due_date);
        // isNaN(date.getTime()) √© a forma mais confi√°vel de verificar data inv√°lida
        // getTime() retorna NaN para datas inv√°lidas
        if (isNaN(dueDate.getTime())) {
          console.log('‚ùå Valida√ß√£o falhou: data de vencimento inv√°lida:', due_date);
          res.status(HttpStatusCode.BAD_REQUEST).json({
            success: false,
            message: 'Data de vencimento tem formato inv√°lido',
            errors: ['Use formato ISO 8601: YYYY-MM-DD ou YYYY-MM-DDTHH:mm:ss']
          } as ApiResponse);
          return;
        }

        // VALIDA√á√ÉO OPCIONAL: DATA N√ÉO PODE SER NO PASSADO
        // Comentado porque pode ser √∫til criar tarefas com data passada em alguns casos
        /*
        const now = new Date();
        if (dueDate < now) {
          console.log('‚ùå Valida√ß√£o falhou: data de vencimento no passado');
          res.status(HttpStatusCode.BAD_REQUEST).json({
            success: false,
            message: 'Data de vencimento n√£o pode ser no passado',
            errors: ['Escolha uma data futura']
          } as ApiResponse);
          return;
        }
        */
      }

      // ============================================
      // CRIA√á√ÉO DA TAREFA NO BANCO DE DADOS
      // ============================================

      // PREPARAR DADOS PARA INSER√á√ÉO
      // Limpa e padroniza os dados antes de enviar para o banco
      const todoData: CreateTodoData = {
        title: title.trim(),                                    // Remove espa√ßos extras
        description: description?.trim() || undefined,          // undefined se vazio
        priority: priority || 'media',                          // Padr√£o: m√©dia
        due_date: due_date || undefined                         // undefined se n√£o fornecida
      };

      // CHAMAR MODELO PARA INSERIR NO BANCO
      // TodoModel.create() executa INSERT na tabela todos
      // Retorna o ID da tarefa criada
      // user.id garante que a tarefa pertence ao usu√°rio autenticado
      console.log('üíæ Inserindo tarefa no banco de dados...');
      const todoId = await TodoModel.create(user.id, todoData);
      console.log('‚úÖ Tarefa inserida com ID:', todoId);

      // BUSCAR TAREFA CRIADA PARA CONFIRMA√á√ÉO
      // Importante buscar os dados do banco para garantir que:
      // 1. A tarefa foi realmente criada
      // 2. Os campos autom√°ticos foram preenchidos (created_at, updated_at)
      // 3. Retornar dados exatos como est√£o no banco
      const createdTodo = await TodoModel.findById(todoId, user.id);
      
      if (!createdTodo) {
        // Situa√ß√£o rara: tarefa foi criada mas n√£o conseguiu buscar
        console.error('‚ùå Erro: tarefa criada mas n√£o encontrada na busca');
        res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
          success: false,
          message: 'Erro ao confirmar cria√ß√£o da tarefa',
          errors: ['Tarefa criada mas n√£o confirmada']
        } as ApiResponse);
        return;
      }

      // LOG DE SUCESSO PARA AUDITORIA
      console.log('‚úÖ Tarefa criada com sucesso:', {
        id: createdTodo.id,
        title: createdTodo.title,
        userId: user.id,
        priority: createdTodo.priority
      });

      // RESPOSTA DE SUCESSO PARA O CLIENTE
      // Status 201 (Created) indica que um novo recurso foi criado
      // Retorna dados completos da tarefa criada
      res.status(HttpStatusCode.CREATED).json({
        success: true,
        message: 'Tarefa criada com sucesso',
        data: {
          todo: createdTodo // Dados completos da tarefa do banco
        }
      } as ApiResponse<{ todo: TodoResponse | undefined }>);

    } catch (error: any) {
      // TRATAMENTO DE ERROS N√ÉO PREVISTOS
      // Captura qualquer erro que n√£o foi tratado nas valida√ß√µes
      // Exemplos: erro de conex√£o com banco, erro de c√≥digo, etc.
      console.error('‚ùå Erro inesperado ao criar tarefa:', {
        message: error.message,
        stack: error.stack,
        userId: req.user?.id
      });
      
      // Resposta gen√©rica de erro interno para n√£o expor detalhes
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor ao criar tarefa',
        errors: ['Falha tempor√°ria. Tente novamente em alguns instantes.']
      } as ApiResponse);
    }
  }

  /**
   * LISTAR TODAS AS TAREFAS DO USU√ÅRIO
   * 
   * Esta fun√ß√£o retorna uma lista paginada das tarefas do usu√°rio autenticado
   * com suporte a m√∫ltiplos filtros e busca por texto.
   * 
   * Funcionalidades:
   * - Pagina√ß√£o (page, limit)
   * - Filtro por status (completed: true/false)
   * - Filtro por prioridade (baixa, media, alta)
   * - Busca por texto no t√≠tulo e descri√ß√£o
   * - Ordena√ß√£o inteligente (prioridade + data)
   * 
   * Query Parameters aceitos:
   * - ?completed=true|false - filtra por status de conclus√£o
   * - ?priority=baixa|media|alta - filtra por prioridade
   * - ?search=texto - busca texto no t√≠tulo/descri√ß√£o
   * - ?page=1 - n√∫mero da p√°gina (padr√£o: 1)
   * - ?limit=10 - itens por p√°gina (padr√£o: 10, m√°ximo: 100)
   * 
   * Exemplo de uso:
   * GET /api/todos?completed=false&priority=alta&search=projeto&page=1&limit=20
   * 
   * @param req - Request autenticada com query parameters opcionais
   * @param res - Response com lista paginada de tarefas
   */
  static async getAll(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      // VERIFICAR AUTENTICA√á√ÉO DO USU√ÅRIO
      const user = req.user;

      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido ou expirado']
        } as ApiResponse);
        return;
      }

      // LOG DA OPERA√á√ÉO
      console.log('üìã Solicita√ß√£o de listagem de tarefas:', {
        userId: user.id,
        userEmail: user.email,
        queryParams: req.query
      });

      // ============================================
      // EXTRAIR E PROCESSAR FILTROS DA QUERY STRING
      // ============================================

      // CONSTRUIR OBJETO DE FILTROS
      // Converte query parameters (sempre strings) para tipos apropriados
      const filters: TodoFilters = {
        // FILTRO DE STATUS COMPLETED
        // req.query.completed pode ser: 'true', 'false', undefined
        // Convers√£o: 'true' -> true, 'false' -> false, outros -> undefined
        completed: req.query.completed === 'true' ? true : 
                  req.query.completed === 'false' ? false : 
                  undefined,
        
        // FILTRO DE PRIORIDADE
        // Type assertion para garantir que √© um dos valores v√°lidos
        priority: req.query.priority as 'baixa' | 'media' | 'alta' | undefined,
        
        // FILTRO DE BUSCA POR TEXTO
        // Busca no t√≠tulo e descri√ß√£o da tarefa
        search: req.query.search as string | undefined,
        
        // PAGINA√á√ÉO - P√ÅGINA ATUAL
        // parseInt() converte string para n√∫mero
        // || 1 define valor padr√£o se convers√£o falhar ou n√£o fornecido
        page: parseInt(req.query.page as string) || 1,
        
        // PAGINA√á√ÉO - ITENS POR P√ÅGINA
        // Padr√£o: 10 itens por p√°gina
        limit: parseInt(req.query.limit as string) || 10
      };

      // ============================================
      // VALIDA√á√ÉO E SANITIZA√á√ÉO DOS FILTROS
      // ============================================

      // VALIDAR P√ÅGINA M√çNIMA
      // P√°gina deve ser pelo menos 1
      if (filters.page && filters.page < 1) {
        console.log('‚ö†Ô∏è P√°gina inv√°lida fornecida:', filters.page, 'corrigindo para 1');
        filters.page = 1;
      }

      // VALIDAR LIMITE DE ITENS POR P√ÅGINA
      // Previne sobrecarga do servidor limitando itens por p√°gina
      // M√≠nimo: 1, M√°ximo: 100 itens
      if (filters.limit && (filters.limit < 1 || filters.limit > 100)) {
        console.log('‚ö†Ô∏è Limite inv√°lido fornecido:', filters.limit, 'corrigindo para 10');
        filters.limit = 10;
      }

      // GARANTIR VALORES PADR√ÉO PARA PAGINA√á√ÉO
      // Importante para evitar undefined que pode quebrar consultas SQL
      if (!filters.page) filters.page = 1;
      if (!filters.limit) filters.limit = 10;

      // VALIDAR PRIORIDADE SE FORNECIDA
      // Verifica se a prioridade est√° dentro dos valores aceitos
      if (filters.priority && !['baixa', 'media', 'alta'].includes(filters.priority)) {
        console.log('‚ùå Prioridade inv√°lida no filtro:', filters.priority);
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Prioridade deve ser: baixa, media ou alta',
          errors: [`Filtro de prioridade "${filters.priority}" n√£o √© v√°lido`]
        } as ApiResponse);
        return;
      }

      // SANITIZAR BUSCA POR TEXTO (SE FORNECIDA)
      // Remove espa√ßos extras e previne buscas muito pequenas
      if (filters.search) {
        filters.search = filters.search.trim();
        // Opcional: ignorar buscas muito curtas para performance
        if (filters.search.length < 2) {
          console.log('‚ö†Ô∏è Termo de busca muito curto, ignorando:', filters.search);
          filters.search = undefined;
        }
      }

      // LOG DOS FILTROS PROCESSADOS
      console.log('üîç Filtros aplicados:', {
        completed: filters.completed,
        priority: filters.priority,
        search: filters.search ? `"${filters.search}"` : 'nenhuma',
        page: filters.page,
        limit: filters.limit
      });

      // ============================================
      // BUSCAR TAREFAS NO BANCO DE DADOS
      // ============================================

      // EXECUTAR CONSULTA COM FILTROS
      // TodoModel.findByUser() executa SELECT com WHERE din√¢mico
      // Inclui pagina√ß√£o, ordena√ß√£o e contagem total
      console.log('üíæ Executando consulta no banco de dados...');
      const result = await TodoModel.findByUser(user.id, filters);

      // LOG DOS RESULTADOS
      const resultLog = {
        totalFound: result.data.length,
        totalInDatabase: result.pagination?.total || 0,
        currentPage: result.pagination?.page || filters.page,
        totalPages: result.pagination?.totalPages || 1,
        hasMore: result.pagination?.hasNext || false
      };
      console.log('‚úÖ Consulta executada com sucesso:', resultLog);

      // VERIFICAR SE ENCONTROU RESULTADOS
      if (result.data.length === 0) {
        const message = filters.search || filters.completed !== undefined || filters.priority 
          ? 'Nenhuma tarefa encontrada com os filtros aplicados'
          : 'Voc√™ ainda n√£o criou nenhuma tarefa';
        
        console.log('üì≠ Nenhuma tarefa encontrada para os filtros aplicados');
      }

      // ============================================
      // RESPOSTA PARA O CLIENTE
      // ============================================

      // RETORNAR RESPOSTA PAGINADA
      // O result j√° cont√©m a estrutura PaginatedResponse completa
      // Inclui: data[], pagination{}, success, message
      res.status(HttpStatusCode.OK).json(result);

    } catch (error: any) {
      // TRATAMENTO DE ERROS N√ÉO PREVISTOS
      console.error('‚ùå Erro inesperado ao listar tarefas:', {
        message: error.message,
        stack: error.stack,
        userId: req.user?.id,
        filters: req.query
      });
      
      // Resposta gen√©rica de erro interno
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor ao buscar tarefas',
        errors: ['Falha tempor√°ria. Tente recarregar a p√°gina.']
      } as ApiResponse);
    }
  }

  /**
   * OBTER TAREFA ESPEC√çFICA POR ID
   * 
   * Esta fun√ß√£o busca e retorna uma tarefa espec√≠fica baseada no ID fornecido.
   * Inclui verifica√ß√£o de propriedade - usu√°rios s√≥ podem acessar suas pr√≥prias tarefas.
   * 
   * Funcionalidades:
   * - Busca tarefa por ID √∫nico
   * - Verifica se tarefa pertence ao usu√°rio autenticado
   * - Retorna dados completos da tarefa
   * - Tratamento robusto de erros (ID inv√°lido, n√£o encontrada, etc.)
   * 
   * Casos de uso:
   * - Visualizar detalhes de uma tarefa espec√≠fica
   * - Editar tarefa (buscar dados atuais)
   * - Validar exist√™ncia antes de outras opera√ß√µes
   * 
   * URL: GET /api/todos/:id
   * Exemplo: GET /api/todos/123
   * 
   * @param req - Request autenticada com ID da tarefa nos par√¢metros da URL
   * @param res - Response com dados da tarefa ou erro
   */
  static async getById(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      // EXTRAIR DADOS DO USU√ÅRIO AUTENTICADO
      const user = req.user;
      
      // EXTRAIR ID DA TAREFA DOS PAR√ÇMETROS DA URL
      // req.params.id vem da rota definida como /api/todos/:id
      // Como URL params s√£o sempre strings, precisa converter para n√∫mero
      // parseInt() converte string para integer
      // Exemplo: "/api/todos/123" -> req.params.id = "123" -> todoId = 123
      const todoId = parseInt(req.params.id);

      // VERIFICA√á√ÉO DE SEGURAN√áA - USU√ÅRIO AUTENTICADO
      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido ou expirado']
        } as ApiResponse);
        return;
      }

      // VALIDA√á√ÉO DO ID DA TAREFA
      // isNaN() verifica se a convers√£o parseInt() falhou
      // Falha acontece quando ID n√£o √© um n√∫mero v√°lido
      // Exemplos que falham: "abc", "12.5", "", null, undefined
      if (isNaN(todoId)) {
        console.log('‚ùå ID de tarefa inv√°lido fornecido:', req.params.id);
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'ID da tarefa deve ser um n√∫mero v√°lido',
          errors: [`ID "${req.params.id}" n√£o √© um n√∫mero v√°lido`]
        } as ApiResponse);
        return;
      }

      // VALIDA√á√ÉO ADICIONAL: ID POSITIVO
      // IDs de banco de dados s√£o sempre n√∫meros positivos
      // Previne tentativas de acesso com IDs negativos ou zero
      if (todoId <= 0) {
        console.log('‚ùå ID de tarefa deve ser positivo:', todoId);
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'ID da tarefa deve ser um n√∫mero positivo',
          errors: [`ID ${todoId} n√£o √© v√°lido`]
        } as ApiResponse);
        return;
      }

      // LOG DA OPERA√á√ÉO PARA AUDITORIA
      console.log('üîç Solicita√ß√£o de busca de tarefa espec√≠fica:', {
        todoId: todoId,
        userId: user.id,
        userEmail: user.email
      });

      // ============================================
      // BUSCAR TAREFA NO BANCO DE DADOS
      // ============================================

      // EXECUTAR CONSULTA NO BANCO
      // TodoModel.findById() executa SELECT WHERE id = ? AND user_id = ?
      // A verifica√ß√£o user_id garante que:
      // 1. Usu√°rio s√≥ acessa suas pr√≥prias tarefas
      // 2. N√£o h√° vazamento de dados entre usu√°rios
      // 3. Seguran√ßa de propriedade dos dados
      console.log('üíæ Buscando tarefa no banco de dados...');
      const todo = await TodoModel.findById(todoId, user.id);

      // VERIFICAR SE TAREFA FOI ENCONTRADA
      // todo ser√° undefined se:
      // 1. ID n√£o existe na tabela
      // 2. Tarefa existe mas pertence a outro usu√°rio
      // 3. Tarefa foi deletada
      if (!todo) {
        console.log('‚ùå Tarefa n√£o encontrada ou n√£o pertence ao usu√°rio:', {
          todoId: todoId,
          userId: user.id
        });
        
        res.status(HttpStatusCode.NOT_FOUND).json({
          success: false,
          message: 'Tarefa n√£o encontrada',
          errors: [
            'A tarefa solicitada n√£o existe ou voc√™ n√£o tem permiss√£o para acess√°-la'
          ]
        } as ApiResponse);
        return;
      }

      // LOG DE SUCESSO
      console.log('‚úÖ Tarefa encontrada com sucesso:', {
        todoId: todo.id,
        title: todo.title,
        completed: todo.completed,
        priority: todo.priority,
        userId: user.id
      });

      // ============================================
      // RESPOSTA DE SUCESSO
      // ============================================

      // RETORNAR DADOS COMPLETOS DA TAREFA
      // Status 200 (OK) indica que a opera√ß√£o foi bem-sucedida
      // Retorna todos os campos da tarefa:
      // - id, title, description, completed
      // - priority, due_date, created_at, updated_at
      res.status(HttpStatusCode.OK).json({
        success: true,
        message: 'Tarefa encontrada com sucesso',
        data: {
          todo: todo // Dados completos da tarefa
        }
      } as ApiResponse<{ todo: TodoResponse }>);

    } catch (error: any) {
      // TRATAMENTO DE ERROS N√ÉO PREVISTOS
      // Captura erros de:
      // - Conex√£o com banco de dados
      // - Erros de SQL
      // - Problemas de infraestrutura
      // - Bugs no c√≥digo
      console.error('‚ùå Erro inesperado ao buscar tarefa espec√≠fica:', {
        message: error.message,
        stack: error.stack,
        todoId: req.params.id,
        userId: req.user?.id
      });
      
      // Resposta gen√©rica de erro interno
      // N√£o expor detalhes internos para o cliente
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor ao buscar tarefa',
        errors: ['Falha tempor√°ria. Tente novamente em alguns instantes.']
      } as ApiResponse);
    }
  }

  /**
   * ATUALIZAR TAREFA EXISTENTE
   * 
   * Esta fun√ß√£o permite atualizar campos espec√≠ficos de uma tarefa existente.
   * Suporta atualiza√ß√£o parcial - apenas os campos fornecidos s√£o atualizados.
   * 
   * Funcionalidades:
   * - Atualiza√ß√£o parcial de campos
   * - Valida√ß√£o individual de cada campo
   * - Verifica√ß√£o de propriedade da tarefa
   * - Preserva√ß√£o de campos n√£o alterados
   * - Retorno da tarefa atualizada
   * 
   * Campos atualiz√°veis:
   * - title: string (obrigat√≥rio se fornecido)
   * - description: string opcional (pode ser removida)
   * - completed: boolean (status de conclus√£o)
   * - priority: 'baixa' | 'media' | 'alta'
   * - due_date: string ISO date (pode ser removida)
   * 
   * URL: PUT /api/todos/:id
   * Exemplo: PUT /api/todos/123
   * 
   * @param req - Request autenticada com ID nos params e dados no body
   * @param res - Response com tarefa atualizada ou erro
   */
  static async update(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      // EXTRAIR DADOS B√ÅSICOS
      const user = req.user;
      const todoId = parseInt(req.params.id);
      
      // EXTRAIR CAMPOS PARA ATUALIZA√á√ÉO DO BODY
      // Desestrutura√ß√£o permite capturar apenas campos espec√≠ficos
      // Todos os campos s√£o opcionais em uma atualiza√ß√£o
      const { 
        title,       // Novo t√≠tulo (opcional)
        description, // Nova descri√ß√£o (opcional)
        completed,   // Novo status de conclus√£o (opcional)
        priority,    // Nova prioridade (opcional)
        due_date     // Nova data de vencimento (opcional)
      }: UpdateTodoData = req.body;

      // VERIFICA√á√ÉO DE SEGURAN√áA - USU√ÅRIO AUTENTICADO
      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido ou expirado']
        } as ApiResponse);
        return;
      }

      // VALIDA√á√ÉO DO ID DA TAREFA
      if (isNaN(todoId) || todoId <= 0) {
        console.log('‚ùå ID de tarefa inv√°lido para atualiza√ß√£o:', req.params.id);
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'ID da tarefa deve ser um n√∫mero positivo v√°lido',
          errors: [`ID "${req.params.id}" n√£o √© v√°lido`]
        } as ApiResponse);
        return;
      }

      // LOG DA OPERA√á√ÉO
      console.log('üìù Solicita√ß√£o de atualiza√ß√£o de tarefa:', {
        todoId: todoId,
        userId: user.id,
        fieldsToUpdate: {
          title: title !== undefined,
          description: description !== undefined,
          completed: completed !== undefined,
          priority: priority !== undefined,
          due_date: due_date !== undefined
        }
      });

      // ============================================
      // VALIDA√á√ÉO E PREPARA√á√ÉO DOS DADOS DE ATUALIZA√á√ÉO
      // ============================================

      // OBJETO PARA ACUMULAR CAMPOS V√ÅLIDOS
      // S√≥ inclu√≠mos campos que passaram na valida√ß√£o
      // Isso permite atualiza√ß√£o parcial segura
      const updateData: UpdateTodoData = {};

      // VALIDA√á√ÉO E PREPARA√á√ÉO DO T√çTULO
      if (title !== undefined) {
        // Verificar se √© string v√°lida
        if (typeof title !== 'string' || title.trim().length === 0) {
          console.log('‚ùå T√≠tulo inv√°lido fornecido:', typeof title, title);
          res.status(HttpStatusCode.BAD_REQUEST).json({
            success: false,
            message: 'T√≠tulo deve ser uma string n√£o vazia',
            errors: ['T√≠tulo n√£o pode estar vazio']
          } as ApiResponse);
          return;
        }

        // Verificar comprimento m√°ximo
        if (title.length > 200) {
          console.log('‚ùå T√≠tulo muito longo:', title.length, 'caracteres');
          res.status(HttpStatusCode.BAD_REQUEST).json({
            success: false,
            message: 'T√≠tulo n√£o pode ter mais de 200 caracteres',
            errors: [`T√≠tulo tem ${title.length} caracteres. M√°ximo: 200`]
          } as ApiResponse);
          return;
        }

        // Adicionar t√≠tulo validado aos dados de atualiza√ß√£o
        updateData.title = title.trim();
      }

      // VALIDA√á√ÉO E PREPARA√á√ÉO DA DESCRI√á√ÉO
      if (description !== undefined) {
        // Descri√ß√£o pode ser string vazia (para remover descri√ß√£o existente)
        if (description && description.length > 1000) {
          console.log('‚ùå Descri√ß√£o muito longa:', description.length, 'caracteres');
          res.status(HttpStatusCode.BAD_REQUEST).json({
            success: false,
            message: 'Descri√ß√£o n√£o pode ter mais de 1000 caracteres',
            errors: [`Descri√ß√£o tem ${description.length} caracteres. M√°ximo: 1000`]
          } as ApiResponse);
          return;
        }

        // Se descri√ß√£o √© string vazia, converter para null (remove descri√ß√£o)
        // Se tem conte√∫do, fazer trim para remover espa√ßos extras
        updateData.description = description?.trim() || undefined;
      }

      // VALIDA√á√ÉO E PREPARA√á√ÉO DO STATUS COMPLETED
      if (completed !== undefined) {
        // Verificar se √© boolean v√°lido
        if (typeof completed !== 'boolean') {
          console.log('‚ùå Campo completed inv√°lido:', typeof completed, completed);
          res.status(HttpStatusCode.BAD_REQUEST).json({
            success: false,
            message: 'Campo completed deve ser boolean (true ou false)',
            errors: ['Valor de completed deve ser true ou false']
          } as ApiResponse);
          return;
        }

        updateData.completed = completed;
      }

      // VALIDA√á√ÉO E PREPARA√á√ÉO DA PRIORIDADE
      if (priority !== undefined) {
        // Verificar se √© uma das prioridades v√°lidas
        if (!['baixa', 'media', 'alta'].includes(priority)) {
          console.log('‚ùå Prioridade inv√°lida:', priority);
          res.status(HttpStatusCode.BAD_REQUEST).json({
            success: false,
            message: 'Prioridade deve ser: baixa, media ou alta',
            errors: [`Prioridade "${priority}" n√£o √© v√°lida`]
          } as ApiResponse);
          return;
        }

        updateData.priority = priority;
      }

      // VALIDA√á√ÉO E PREPARA√á√ÉO DA DATA DE VENCIMENTO
      if (due_date !== undefined) {
        // Se due_date √© string vazia ou null, remove a data
        if (due_date && due_date.trim() !== '') {
          // Tentar converter para Date para validar formato
          const dueDate = new Date(due_date);
          if (isNaN(dueDate.getTime())) {
            console.log('‚ùå Data de vencimento inv√°lida:', due_date);
            res.status(HttpStatusCode.BAD_REQUEST).json({
              success: false,
              message: 'Data de vencimento tem formato inv√°lido',
              errors: ['Use formato ISO 8601: YYYY-MM-DD ou YYYY-MM-DDTHH:mm:ss']
            } as ApiResponse);
            return;
          }
          updateData.due_date = due_date;
        } else {
          // String vazia ou null -> remove a data de vencimento
          updateData.due_date = undefined;
        }
      }

      // VERIFICAR SE PELO MENOS UM CAMPO FOI FORNECIDO
      // Atualiza√ß√£o sem campos √© inv√°lida
      if (Object.keys(updateData).length === 0) {
        console.log('‚ùå Nenhum campo v√°lido fornecido para atualiza√ß√£o');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Nenhum campo v√°lido fornecido para atualiza√ß√£o',
          errors: [
            'Forne√ßa pelo menos um campo v√°lido: title, description, completed, priority, due_date'
          ]
        } as ApiResponse);
        return;
      }

      // LOG DOS DADOS VALIDADOS
      console.log('‚úÖ Dados validados para atualiza√ß√£o:', {
        todoId: todoId,
        fieldsCount: Object.keys(updateData).length,
        fields: Object.keys(updateData)
      });

      // ============================================
      // EXECUTAR ATUALIZA√á√ÉO NO BANCO DE DADOS
      // ============================================

      // CHAMAR MODELO PARA EXECUTAR UPDATE
      // TodoModel.update() executa UPDATE WHERE id = ? AND user_id = ?
      // A verifica√ß√£o user_id garante que s√≥ o dono pode atualizar
      console.log('üíæ Executando atualiza√ß√£o no banco de dados...');
      const success = await TodoModel.update(todoId, user.id, updateData);

      // VERIFICAR SE ATUALIZA√á√ÉO FOI BEM-SUCEDIDA
      // success = false pode significar:
      // 1. Tarefa n√£o existe
      // 2. Tarefa n√£o pertence ao usu√°rio
      // 3. Erro na query SQL
      if (!success) {
        console.log('‚ùå Falha na atualiza√ß√£o - tarefa n√£o encontrada ou sem permiss√£o:', {
          todoId: todoId,
          userId: user.id
        });
        
        res.status(HttpStatusCode.NOT_FOUND).json({
          success: false,
          message: 'Tarefa n√£o encontrada ou sem permiss√£o para atualizar',
          errors: [
            'A tarefa n√£o existe ou voc√™ n√£o tem permiss√£o para modific√°-la'
          ]
        } as ApiResponse);
        return;
      }

      // BUSCAR DADOS ATUALIZADOS DA TAREFA
      // Importante buscar do banco para garantir dados frescos
      // Inclui campos calculated, triggers, etc. que podem ter mudado
      const updatedTodo = await TodoModel.findById(todoId, user.id);

      if (!updatedTodo) {
        // Situa√ß√£o rara: UPDATE passou mas SELECT falhou
        console.error('‚ùå Erro: tarefa atualizada mas n√£o encontrada na busca');
        res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
          success: false,
          message: 'Erro ao confirmar atualiza√ß√£o da tarefa',
          errors: ['Tarefa atualizada mas n√£o confirmada']
        } as ApiResponse);
        return;
      }

      // LOG DE SUCESSO
      console.log('‚úÖ Tarefa atualizada com sucesso:', {
        todoId: updatedTodo.id,
        title: updatedTodo.title,
        completed: updatedTodo.completed,
        priority: updatedTodo.priority,
        fieldsUpdated: Object.keys(updateData)
      });

      // ============================================
      // RESPOSTA DE SUCESSO
      // ============================================

      // RETORNAR TAREFA ATUALIZADA
      // Status 200 (OK) indica sucesso na atualiza√ß√£o
      // Dados retornados s√£o frescos do banco de dados
      res.status(HttpStatusCode.OK).json({
        success: true,
        message: 'Tarefa atualizada com sucesso',
        data: {
          todo: updatedTodo, // Dados atualizados completos
          fieldsUpdated: Object.keys(updateData) // Campos que foram modificados
        }
      } as ApiResponse<{ 
        todo: TodoResponse | undefined; 
        fieldsUpdated: string[] 
      }>);

    } catch (error: any) {
      // TRATAMENTO DE ERROS N√ÉO PREVISTOS
      console.error('‚ùå Erro inesperado ao atualizar tarefa:', {
        message: error.message,
        stack: error.stack,
        todoId: req.params.id,
        userId: req.user?.id,
        updateData: req.body
      });
      
      // Resposta gen√©rica de erro interno
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor ao atualizar tarefa',
        errors: ['Falha tempor√°ria. Tente novamente em alguns instantes.']
      } as ApiResponse);
    }
  }

  /**
   * Remove uma tarefa
   * @param req - Request autenticada com ID da tarefa
   * @param res - Response
   */
  static async delete(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const user = req.user;
      const todoId = parseInt(req.params.id);

      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido']
        } as ApiResponse);
        return;
      }

      if (isNaN(todoId)) {
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'ID da tarefa inv√°lido',
          errors: ['ID deve ser um n√∫mero']
        } as ApiResponse);
        return;
      }

      console.log('üóëÔ∏è Removendo tarefa ID:', todoId, 'para usu√°rio:', user.id);

      // Remover tarefa
      const success = await TodoModel.delete(todoId, user.id);

      if (!success) {
        res.status(HttpStatusCode.NOT_FOUND).json({
          success: false,
          message: 'Tarefa n√£o encontrada',
          errors: ['Tarefa n√£o existe ou n√£o pertence ao usu√°rio']
        } as ApiResponse);
        return;
      }

      console.log('‚úÖ Tarefa removida:', todoId);

      res.status(HttpStatusCode.OK).json({
        success: true,
        message: 'Tarefa removida com sucesso',
        data: {}
      } as ApiResponse);
    } catch (error: any) {
      console.error('‚ùå Erro ao remover tarefa:', error.message);
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao remover tarefa']
      } as ApiResponse);
    }
  }

  /**
   * Alterna o status de uma tarefa (conclu√≠da/pendente)
   * @param req - Request autenticada com ID da tarefa
   * @param res - Response
   */
  static async toggleCompleted(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const user = req.user;
      const todoId = parseInt(req.params.id);

      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido']
        } as ApiResponse);
        return;
      }

      if (isNaN(todoId)) {
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'ID da tarefa inv√°lido',
          errors: ['ID deve ser um n√∫mero']
        } as ApiResponse);
        return;
      }

      console.log('üîÑ Alternando status da tarefa ID:', todoId, 'para usu√°rio:', user.id);

      // Buscar tarefa atual
      const currentTodo = await TodoModel.findById(todoId, user.id);

      if (!currentTodo) {
        console.log('‚ùå Tarefa n√£o encontrada:', todoId);
        res.status(HttpStatusCode.NOT_FOUND).json({
          success: false,
          message: 'Tarefa n√£o encontrada',
          errors: ['Tarefa n√£o existe ou n√£o pertence ao usu√°rio']
        } as ApiResponse);
        return;
      }

      console.log('üìù Tarefa atual:', currentTodo);

      // Alternar status
      const newStatus = !currentTodo.completed;
      console.log('üîÑ Novo status ser√°:', newStatus);

      const success = await TodoModel.update(todoId, user.id, { completed: newStatus });

      if (!success) {
        console.log('‚ùå Falha ao atualizar tarefa:', todoId);
        res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
          success: false,
          message: 'Erro ao alterar status da tarefa',
          errors: ['Falha interna ao alterar status']
        } as ApiResponse);
        return;
      }

      // Buscar tarefa atualizada para confirmar
      const updatedTodo = await TodoModel.findById(todoId, user.id);
      console.log('‚úÖ Tarefa atualizada:', updatedTodo);

      if (!updatedTodo) {
        console.log('‚ùå Erro: tarefa sumiu ap√≥s atualiza√ß√£o');
        res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
          success: false,
          message: 'Erro inesperado ap√≥s atualiza√ß√£o',
          errors: ['Tarefa n√£o encontrada ap√≥s atualiza√ß√£o']
        } as ApiResponse);
        return;
      }

      console.log('‚úÖ Status da tarefa alterado com sucesso:', todoId, 'para:', updatedTodo.completed);

      res.status(HttpStatusCode.OK).json({
        success: true,
        message: `Tarefa marcada como ${updatedTodo.completed ? 'conclu√≠da' : 'pendente'}`,
        data: {
          todo: updatedTodo
        }
      } as ApiResponse<{ todo: TodoResponse }>);
    } catch (error: any) {
      console.error('‚ùå Erro ao alterar status da tarefa:', error.message);
      console.error('Stack trace:', error.stack);
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao alterar status da tarefa']
      } as ApiResponse);
    }
  }

  /**
   * Obt√©m estat√≠sticas das tarefas do usu√°rio
   * @param req - Request autenticada
   * @param res - Response
   */
  static async getStats(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const user = req.user;

      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido']
        } as ApiResponse);
        return;
      }

      console.log('üìä Obtendo estat√≠sticas para usu√°rio:', user.id);

      // Buscar estat√≠sticas
      const stats = await TodoModel.getStats(user.id);

      console.log('‚úÖ Estat√≠sticas calculadas para usu√°rio:', user.id);

      res.status(HttpStatusCode.OK).json({
        success: true,
        message: 'Estat√≠sticas recuperadas com sucesso',
        data: {
          stats
        }
      } as ApiResponse<{ stats: TodoStats }>);
    } catch (error: any) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error.message);
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao calcular estat√≠sticas']
      } as ApiResponse);
    }
  }

  /**
   * Remove todas as tarefas conclu√≠das do usu√°rio
   * @param req - Request autenticada
   * @param res - Response
   */
  static async deleteCompleted(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const user = req.user;

      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido']
        } as ApiResponse);
        return;
      }

      console.log('üßπ Removendo tarefas conclu√≠das para usu√°rio:', user.id);

      // Remover tarefas conclu√≠das
      const deletedCount = await TodoModel.deleteCompleted(user.id);

      console.log('‚úÖ Tarefas conclu√≠das removidas:', deletedCount);

      res.status(HttpStatusCode.OK).json({
        success: true,
        message: `${deletedCount} tarefa(s) conclu√≠da(s) removida(s) com sucesso`,
        data: {
          deletedCount
        }
      } as ApiResponse<{ deletedCount: number }>);
    } catch (error: any) {
      console.error('‚ùå Erro ao remover tarefas conclu√≠das:', error.message);
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao remover tarefas conclu√≠das']
      } as ApiResponse);
    }
  }

  /**
   * Marca todas as tarefas do usu√°rio como conclu√≠das
   * @param req - Request autenticada
   * @param res - Response
   */
  static async markAllCompleted(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const user = req.user;

      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido']
        } as ApiResponse);
        return;
      }

      console.log('‚úÖ Marcando todas as tarefas como conclu√≠das para usu√°rio:', user.id);

      // Marcar todas como conclu√≠das
      const updatedCount = await TodoModel.markAllCompleted(user.id);

      console.log('‚úÖ Tarefas marcadas como conclu√≠das:', updatedCount);

      res.status(HttpStatusCode.OK).json({
        success: true,
        message: `${updatedCount} tarefa(s) marcada(s) como conclu√≠da(s)`,
        data: {
          updatedCount
        }
      } as ApiResponse<{ updatedCount: number }>);
    } catch (error: any) {
      console.error('‚ùå Erro ao marcar tarefas como conclu√≠das:', error.message);
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao marcar tarefas como conclu√≠das']
      } as ApiResponse);
    }
  }
}
