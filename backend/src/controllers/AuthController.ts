/**
 * Controlador de Autentica√ß√£o
 * Gerencia todas as opera√ß√µes relacionadas √† autentica√ß√£o de usu√°rios
 * 
 * Funcionalidades:
 * - Registro de novos usu√°rios
 * - Login e gera√ß√£o de tokens JWT
 * - Visualiza√ß√£o e atualiza√ß√£o de perfil
 * - Altera√ß√£o de senha
 * - Valida√ß√µes de seguran√ßa
 */
import { Request, Response } from 'express';
import { UserModel } from '../models/User';
import { generateToken } from '../middleware/auth';
import { 
  CreateUserData, 
  LoginCredentials, 
  ChangePasswordData,
  ApiResponse, 
  UserResponse,
  HttpStatusCode 
} from '../types';
import { AuthenticatedRequest } from '../middleware/auth';

/**
 * Classe AuthController
 * Cont√©m m√©todos est√°ticos para opera√ß√µes de autentica√ß√£o
 * Utiliza padr√£o de controlador com m√©todos est√°ticos para simplicidade
 */
export class AuthController {
  /**
   * Registra um novo usu√°rio no sistema
   * Valida dados, verifica se o email j√° existe e cria novo usu√°rio
   * 
   * @param req - Request contendo dados do usu√°rio (name, email, password)
   * @param res - Response para retornar resultado da opera√ß√£o
   */
  static async register(req: Request, res: Response): Promise<void> {
    try {
      // Extrai dados do corpo da requisi√ß√£o
      const { name, email, password }: CreateUserData = req.body;
      
      console.log('üìù Tentativa de registro:', { 
        name, 
        email, 
        password: '***' // Esconde senha nos logs
      });

      // VALIDA√á√ÉO: CAMPOS OBRIGAT√ìRIOS
      // Verificar se todos os campos necess√°rios foram enviados pelo cliente
      // Em JavaScript, valores considerados "falsy" (que falham no if):
      // - undefined (campo n√£o enviado)
      // - null (valor nulo)
      // - "" (string vazia)
      // - 0 (n√∫mero zero)
      // - false (booleano falso)
      // - NaN (Not a Number)
      // O operador ! converte para booleano e inverte (falsy vira true)
      // Usar || (OR) significa que se qualquer campo estiver faltando, a condi√ß√£o √© verdadeira
      if (!name || !email || !password) {
        console.log('‚ùå Valida√ß√£o falhou - campos obrigat√≥rios faltando:', {
          name: !name ? 'FALTANDO' : 'OK',
          email: !email ? 'FALTANDO' : 'OK', 
          password: !password ? 'FALTANDO' : 'OK'
        });
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Nome, email e senha s√£o obrigat√≥rios',
          errors: ['Todos os campos s√£o obrigat√≥rios: name, email, password']
        } as ApiResponse);
        return; // Interrompe execu√ß√£o da fun√ß√£o
      }

      // VALIDA√á√ÉO DE FORMATO DE EMAIL
      // Usar regex (express√£o regular) para verificar se o email tem formato v√°lido
      // Regex explicada parte por parte:
      // ^          : in√≠cio da string (√¢ncora)
      // [^\s@]+    : um ou mais caracteres que N√ÉO sejam espa√ßos (\s) ou @ 
      // @          : exatamente um caractere @
      // [^\s@]+    : um ou mais caracteres que N√ÉO sejam espa√ßos ou @
      // \.         : exatamente um ponto (. √© escapado com \ porque . tem significado especial)
      // [^\s@]+    : um ou mais caracteres que N√ÉO sejam espa√ßos ou @
      // $          : fim da string (√¢ncora)
      // Exemplos v√°lidos: usuario@exemplo.com, test@site.org, email@test.com.br
      // Exemplos inv√°lidos: @exemplo.com, usuario@, usuario.exemplo.com, usuario @exemplo.com
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        console.log('‚ùå Email com formato inv√°lido:', email);
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Formato de email inv√°lido',
          errors: ['Email deve ter um formato v√°lido como: usuario@exemplo.com']
        } as ApiResponse);
        return;
      }

      // VALIDA√á√ÉO DE COMPRIMENTO DA SENHA
      // Verificar se a senha atende aos crit√©rios m√≠nimos de seguran√ßa
      // .length retorna o n√∫mero de caracteres da string
      // 6 caracteres √© o m√≠nimo b√°sico, mas em produ√ß√£o considerar:
      // - Pelo menos 8 caracteres
      // - Mistura de mai√∫sculas e min√∫sculas  
      // - Pelo menos um n√∫mero
      // - Pelo menos um caractere especial (!@#$%^&*)
      // - Verifica√ß√£o contra senhas comuns (123456, password, etc.)
      if (password.length < 6) {
        console.log('‚ùå Senha muito curta - comprimento:', password.length, 'caracteres');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'A senha deve ter pelo menos 6 caracteres',
          errors: ['Senha deve ter no m√≠nimo 6 caracteres para seguran√ßa b√°sica']
        } as ApiResponse);
        return;
      }

      // VALIDA√á√ÉO DE COMPRIMENTO DO NOME
      // Verificar se o nome tem comprimento razo√°vel
      // 3 caracteres √© m√≠nimo para evitar nomes muito curtos (ex: "AB")
      // Em sistemas mais rigorosos, pode-se validar:
      // - N√£o permitir n√∫meros no nome
      // - N√£o permitir caracteres especiais
      // - Validar se cont√©m pelo menos nome e sobrenome
      // - Verificar contra lista de palavras ofensivas
      if (name.length < 3) {
        console.log('‚ùå Nome muito curto - comprimento:', name.length, 'caracteres');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'O nome deve ter pelo menos 3 caracteres',
          errors: ['Nome deve ter no m√≠nimo 3 caracteres']
        } as ApiResponse);
        return;
      }

      // VERIFICAR SE O EMAIL J√Å EST√Å CADASTRADO
      // Buscar na base de dados se j√° existe um usu√°rio com este email
      // Emails devem ser √∫nicos no sistema para evitar conflitos de login
      // Esta verifica√ß√£o √© importante porque:
      // 1. Email √© usado como identificador √∫nico para login
      // 2. Evita m√∫ltiplas contas com mesmo email  
      // 3. Previne confus√£o na recupera√ß√£o de senha
      // 4. Melhora a integridade dos dados
      const existingUserByEmail = await UserModel.findByEmail(email);
      if (existingUserByEmail) {
        console.log('‚ùå Tentativa de registro com email j√° existente:', email);
        console.log('   Usu√°rio existente ID:', existingUserByEmail.id, 'Nome:', existingUserByEmail.name);
        res.status(HttpStatusCode.CONFLICT).json({
          success: false,
          message: 'Este email j√° est√° cadastrado no sistema',
          errors: ['Email j√° est√° em uso. Use outro email ou fa√ßa login.']
        } as ApiResponse);
        return;
      }

      // CRIAR NOVO USU√ÅRIO NO BANCO DE DADOS
      // Chama o modelo User para inserir um novo registro na tabela users
      // O m√©todo create() automaticamente faz hash da senha usando bcrypt
      const newUser = await UserModel.create(name, email, password);
      console.log('‚úÖ Usu√°rio criado com ID:', newUser.id);

      // GERAR TOKEN JWT DE AUTENTICA√á√ÉO
      // Cria um token JWT contendo informa√ß√µes do usu√°rio (payload)
      // Este token ser√° usado para autenticar requisi√ß√µes futuras
      // O token expira em 24 horas (configurado no middleware de auth)
      const token = generateToken({
        userId: newUser.id, // ID √∫nico do usu√°rio
        name,               // Nome do usu√°rio
        email               // Email do usu√°rio
      });

      console.log('‚úÖ Token gerado para usu√°rio:', newUser.id);

      // RESPOSTA DE SUCESSO PARA O CLIENTE
      // Retorna status 201 (Created) com o token e dados do usu√°rio
      // O frontend salvar√° o token no localStorage para pr√≥ximas requisi√ß√µes
      res.status(HttpStatusCode.CREATED).json({
        success: true,
        message: 'Usu√°rio criado com sucesso',
        data: {
          token,
          user: {
            id: newUser.id,
            name,
            email
          }
        }
      } as ApiResponse<{ token: string; user: Partial<UserResponse> }>);
    } catch (error: any) {
      console.error('‚ùå Erro no registro:', error.message);
      
      // Tratamento de erros espec√≠ficos
      if (error.message.includes('j√° est√° cadastrado') || error.message.includes('j√° est√° em uso')) {
        res.status(HttpStatusCode.CONFLICT).json({
          success: false,
          message: error.message,
          errors: [error.message]
        } as ApiResponse);
        return;
      }

      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao criar usu√°rio']
      } as ApiResponse);
    }
  }

  /**
   * Autentica um usu√°rio (login)
   * @param req - Request com credenciais
   * @param res - Response
   */
  static async login(req: Request, res: Response): Promise<void> {
    try {
      const { email, password }: LoginCredentials = req.body;
      
      console.log('üîë Tentativa de login:', { 
        email, 
        password: '***' 
      });

      // Valida√ß√µes b√°sicas
      if (!email || !password) {
        console.log('‚ùå Campos obrigat√≥rios faltando no login');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Email e senha s√£o obrigat√≥rios',
          errors: ['Campos obrigat√≥rios: email, password']
        } as ApiResponse);
        return;
      }

      // BUSCAR USU√ÅRIO NO BANCO DE DADOS PELO EMAIL
      // Procura na tabela users se existe um usu√°rio com o email fornecido
      // O email √© √∫nico na base de dados (constraint UNIQUE)
      const user = await UserModel.findByEmail(email);
      if (!user) {
        // USU√ÅRIO N√ÉO ENCONTRADO
        // Por seguran√ßa, n√£o especificamos se √© email ou senha incorreta
        // Isso evita ataques de enumera√ß√£o de usu√°rios
        console.log('‚ùå Usu√°rio n√£o encontrado:', email);
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Email ou senha incorretos',
          errors: ['Credenciais inv√°lidas']
        } as ApiResponse);
        return;
      }

      // VERIFICAR SE A SENHA EST√Å CORRETA
      // Compara a senha em texto plano com o hash armazenado no banco
      // Usa bcrypt.compare() que √© seguro contra timing attacks
      const isValidPassword = await UserModel.verifyPassword(password, user.password);
      if (!isValidPassword) {
        // SENHA INCORRETA
        // Mesma mensagem gen√©rica por motivos de seguran√ßa
        console.log('‚ùå Senha inv√°lida para:', email);
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Email ou senha incorretos',
          errors: ['Credenciais inv√°lidas']
        } as ApiResponse);
        return;
      }

      // GERAR TOKEN JWT PARA SESS√ÉO AUTENTICADA
      // Cria um novo token JWT com os dados do usu√°rio autenticado
      // Este token ser√° enviado em todas as pr√≥ximas requisi√ß√µes no header Authorization
      const token = generateToken({
        userId: user.id,    // ID √∫nico do usu√°rio (chave prim√°ria)
        name: user.name,    // Nome completo do usu√°rio
        email: user.email   // Email do usu√°rio (j√° validado)
      });

      console.log('‚úÖ Login realizado com sucesso:', user.id);

      // RESPOSTA DE SUCESSO COM TOKEN E DADOS DO USU√ÅRIO
      // Retorna status 200 (OK) com:
      // - Token JWT para autentica√ß√£o
      // - Dados completos do usu√°rio (sem a senha)
      res.status(HttpStatusCode.OK).json({
        success: true,
        message: 'Login realizado com sucesso',
        data: {
          token,
          user: {
            id: user.id,
            name: user.name,
            email: user.email,
            created_at: user.created_at,
            updated_at: user.updated_at
          }
        }
      } as ApiResponse<{ token: string; user: UserResponse }>);
    } catch (error: any) {
      console.error('‚ùå Erro no login:', error.message);
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao processar login']
      } as ApiResponse);
    }
  }

  /**
   * Obt√©m o perfil do usu√°rio autenticado
   * @param req - Request autenticada
   * @param res - Response
   */
  static async getProfile(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const user = req.user;
      
      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido']
        } as ApiResponse);
        return;
      }

      console.log('üë§ Perfil solicitado para usu√°rio:', user.id);

      // BUSCAR DADOS ATUALIZADOS DO USU√ÅRIO NO BANCO
      // Busca os dados mais recentes do usu√°rio na base de dados
      // Isso garante que retornamos informa√ß√µes atualizadas (caso tenha sido alterado)
      // O token pode ter dados antigos se o perfil foi atualizado ap√≥s o login
      const currentUser = await UserModel.findById(user.id);
      
      if (!currentUser) {
        // USU√ÅRIO N√ÉO ENCONTRADO (foi deletado ap√≥s criar o token)
        // Situa√ß√£o rara: usu√°rio fez login mas foi removido da base de dados
        res.status(HttpStatusCode.NOT_FOUND).json({
          success: false,
          message: 'Usu√°rio n√£o encontrado',
          errors: ['Usu√°rio n√£o existe']
        } as ApiResponse);
        return;
      }

      // RETORNAR DADOS COMPLETOS DO PERFIL
      // Inclui: id, name, email, created_at, updated_at
      // Exclui: password (por seguran√ßa)
      res.status(HttpStatusCode.OK).json({
        success: true,
        message: 'Perfil recuperado com sucesso',
        data: {
          user: currentUser
        }
      } as ApiResponse<{ user: UserResponse }>);
    } catch (error: any) {
      console.error('‚ùå Erro ao buscar perfil:', error.message);
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao buscar perfil']
      } as ApiResponse);
    }
  }

  /**
   * Altera a senha do usu√°rio
   * @param req - Request autenticada com dados da nova senha
   * @param res - Response
   */
  static async changePassword(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const user = req.user;
      const { currentPassword, newPassword }: ChangePasswordData = req.body;

      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido']
        } as ApiResponse);
        return;
      }

      console.log('üîê Altera√ß√£o de senha solicitada para usu√°rio:', user.id);

      // Valida√ß√µes
      if (!currentPassword || !newPassword) {
        console.log('‚ùå Senhas n√£o fornecidas');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Senha atual e nova senha s√£o obrigat√≥rias',
          errors: ['Campos obrigat√≥rios: currentPassword, newPassword']
        } as ApiResponse);
        return;
      }

      // VALIDAR COMPRIMENTO DA NOVA SENHA
      // Mesma regra do registro: m√≠nimo 6 caracteres
      // Em produ√ß√£o, considerar regras mais rigorosas (n√∫meros, s√≠mbolos, etc.)
      if (newPassword.length < 6) {
        console.log('‚ùå Nova senha muito curta');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'A nova senha deve ter pelo menos 6 caracteres',
          errors: ['Nova senha deve ter no m√≠nimo 6 caracteres']
        } as ApiResponse);
        return;
      }

      // VERIFICAR SE A NOVA SENHA √â DIFERENTE DA ATUAL
      // For√ßa o usu√°rio a escolher uma senha realmente nova
      // Compara√ß√£o em texto plano (antes do hash)
      if (currentPassword === newPassword) {
        console.log('‚ùå Nova senha igual √† atual');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'A nova senha deve ser diferente da senha atual',
          errors: ['Nova senha deve ser diferente da atual']
        } as ApiResponse);
        return;
      }

      // ALTERAR SENHA NO BANCO DE DADOS
      // Chama o modelo User para:
      // 1. Verificar se a senha atual est√° correta (bcrypt.compare)
      // 2. Gerar hash da nova senha (bcrypt.hash)
      // 3. Atualizar o registro no banco com o novo hash
      const success = await UserModel.changePassword(user.id, {
        currentPassword, // Senha atual em texto plano (para verifica√ß√£o)
        newPassword      // Nova senha em texto plano (ser√° hasheada)
      });

      if (success) {
        // SENHA ALTERADA COM SUCESSO
        // O usu√°rio precisar√° fazer login novamente com a nova senha
        // O token atual continua v√°lido at√© expirar
        console.log('‚úÖ Senha alterada com sucesso para usu√°rio:', user.id);
        res.status(HttpStatusCode.OK).json({
          success: true,
          message: 'Senha alterada com sucesso',
          data: {}
        } as ApiResponse);
      } else {
        console.log('‚ùå Falha ao alterar senha para usu√°rio:', user.id);
        res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
          success: false,
          message: 'Erro ao alterar senha',
          errors: ['Falha interna ao alterar senha']
        } as ApiResponse);
      }
    } catch (error: any) {
      console.error('‚ùå Erro ao alterar senha:', error.message);
      
      if (error.message === 'Senha atual incorreta') {
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Senha atual incorreta',
          errors: ['Senha atual n√£o confere']
        } as ApiResponse);
        return;
      }

      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao alterar senha']
      } as ApiResponse);
    }
  }

  /**
   * Atualiza o perfil do usu√°rio
   * @param req - Request autenticada com dados a serem atualizados
   * @param res - Response
   */
  static async updateProfile(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const user = req.user;
      const { name, email } = req.body;

      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido']
        } as ApiResponse);
        return;
      }

      console.log('üìù Atualiza√ß√£o de perfil solicitada para usu√°rio:', user.id);

      // PREPARAR DADOS PARA ATUALIZA√á√ÉO
      // Objeto que conter√° apenas os campos que ser√£o atualizados
      // Permite atualiza√ß√£o parcial (s√≥ nome, s√≥ email, ou ambos)
      const updateData: Partial<{ name: string; email: string }> = {};

      // VALIDAR E ADICIONAR NOME SE FORNECIDO
      if (name !== undefined) {
        // Validar comprimento m√≠nimo do nome
        if (name.length < 3) {
          res.status(HttpStatusCode.BAD_REQUEST).json({
            success: false,
            message: 'O nome deve ter pelo menos 3 caracteres',
            errors: ['Nome deve ter no m√≠nimo 3 caracteres']
          } as ApiResponse);
          return;
        }
        updateData.name = name; // Adiciona nome aos dados de atualiza√ß√£o
      }

      // VALIDAR E ADICIONAR EMAIL SE FORNECIDO
      if (email !== undefined) {
        // VALIDA√á√ÉO DE FORMATO DE EMAIL COM REGEX
        // Regex explicada:
        // ^[^\s@]+   : in√≠cio, um ou mais caracteres que n√£o sejam espa√ßo ou @
        // @          : exatamente um @
        // [^\s@]+    : um ou mais caracteres que n√£o sejam espa√ßo ou @
        // \.         : exatamente um ponto (escapado)
        // [^\s@]+$   : um ou mais caracteres que n√£o sejam espa√ßo ou @, fim
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
          res.status(HttpStatusCode.BAD_REQUEST).json({
            success: false,
            message: 'Formato de email inv√°lido',
            errors: ['Email deve ter um formato v√°lido como: usuario@exemplo.com']
          } as ApiResponse);
          return;
        }
        updateData.email = email; // Adiciona email aos dados de atualiza√ß√£o
      }

      // VERIFICAR SE PELO MENOS UM CAMPO FOI FORNECIDO
      // Se nenhum campo v√°lido foi enviado, retorna erro
      if (Object.keys(updateData).length === 0) {
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Nenhum campo v√°lido para atualizar',
          errors: ['Forne√ßa nome ou email para atualizar']
        } as ApiResponse);
        return;
      }

      // ATUALIZAR PERFIL NO BANCO DE DADOS
      // Chama o modelo User para atualizar apenas os campos modificados
      // Se email for alterado, verifica se j√° n√£o existe outro usu√°rio com o mesmo email
      const success = await UserModel.update(user.id, updateData);

      if (success) {
        // BUSCAR DADOS ATUALIZADOS DO BANCO
        // Importante buscar dados frescos para confirmar a atualiza√ß√£o
        const updatedUser = await UserModel.findById(user.id);
        
        console.log('‚úÖ Perfil atualizado com sucesso para usu√°rio:', user.id);
        res.status(HttpStatusCode.OK).json({
          success: true,
          message: 'Perfil atualizado com sucesso',
          data: {
            user: updatedUser // Retorna dados atualizados
          }
        } as ApiResponse<{ user: UserResponse | undefined }>);
      } else {
        // FALHA NA ATUALIZA√á√ÉO
        // Pode ser erro de banco ou viola√ß√£o de constraint (email duplicado)
        res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
          success: false,
          message: 'Erro ao atualizar perfil',
          errors: ['Falha interna ao atualizar perfil']
        } as ApiResponse);
      }
    } catch (error: any) {
      console.error('‚ùå Erro ao atualizar perfil:', error.message);
      
      if (error.message.includes('j√° est√° em uso')) {
        res.status(HttpStatusCode.CONFLICT).json({
          success: false,
          message: error.message,
          errors: [error.message]
        } as ApiResponse);
        return;
      }

      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao atualizar perfil']
      } as ApiResponse);
    }
  }

  /**
   * Valida o token JWT atual do usu√°rio
   * 
   * Esta fun√ß√£o verifica se o token JWT enviado pelo cliente √© v√°lido e n√£o expirou.
   * √â usada pelo frontend para confirmar se o usu√°rio ainda est√° autenticado
   * antes de realizar opera√ß√µes que requerem autentica√ß√£o.
   * 
   * Fluxo da valida√ß√£o:
   * 1. O middleware de autentica√ß√£o j√° verificou a assinatura e expira√ß√£o do token
   * 2. Se chegou at√© aqui, o token √© tecnicamente v√°lido
   * 3. Verifica se os dados do usu√°rio est√£o presentes no request
   * 4. Retorna confirma√ß√£o de que o token √© v√°lido
   * 
   * @param req - Request autenticada contendo dados do usu√°rio extra√≠dos do token
   * @param res - Response com confirma√ß√£o de validade
   */
  static async validateToken(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      // EXTRAIR DADOS DO USU√ÅRIO DO TOKEN
      // Se o request chegou at√© aqui, significa que:
      // - O token foi enviado no header Authorization: Bearer <token>
      // - O middleware de auth verificou a assinatura JWT
      // - O token n√£o est√° expirado
      // - Os dados do usu√°rio foram extra√≠dos e colocados em req.user
      const user = req.user;

      // VERIFICAR SE OS DADOS DO USU√ÅRIO EST√ÉO PRESENTES
      // Situa√ß√£o teoricamente imposs√≠vel se o middleware funcionou corretamente
      // Mas √© uma verifica√ß√£o de seguran√ßa adicional
      if (!user) {
        console.log('‚ùå Token sem dados de usu√°rio v√°lidos');
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Token inv√°lido',
          errors: ['Token n√£o cont√©m dados v√°lidos do usu√°rio']
        } as ApiResponse);
        return;
      }

      // LOG DE VALIDA√á√ÉO BEM-SUCEDIDA
      // Registra que o token foi validado com sucesso
      // √ötil para auditoria e debugging
      console.log('‚úÖ Token validado com sucesso para usu√°rio:', user.id);

      // RESPOSTA DE CONFIRMA√á√ÉO DE VALIDADE
      // Retorna status 200 (OK) confirmando que:
      // - O token √© v√°lido e n√£o expirou
      // - O usu√°rio est√° autenticado
      // - Os dados do usu√°rio est√£o √≠ntegros
      // O frontend pode usar essa resposta para manter o usu√°rio logado
      res.status(HttpStatusCode.OK).json({
        success: true,
        message: 'Token v√°lido e usu√°rio autenticado',
        data: {
          user: user,     // Dados completos do usu√°rio (do token)
          valid: true     // Flag expl√≠cita de validade
        }
      } as ApiResponse<{ user: UserResponse; valid: boolean }>);
    } catch (error: any) {
      // TRATAMENTO DE ERROS INESPERADOS
      // Erros que podem ocorrer durante a valida√ß√£o
      // Geralmente relacionados a problemas de infraestrutura
      console.error('‚ùå Erro inesperado ao validar token:', error.message);
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Falha na valida√ß√£o do token']
      } as ApiResponse);
    }
  }

  /**
   * Realiza logout do usu√°rio (invalida√ß√£o no lado cliente)
   * 
   * Como estamos usando JWT stateless (sem estado no servidor), o logout √© 
   * diferente de sistemas tradicionais com sess√µes. O token JWT n√£o pode ser
   * "invalidado" no servidor de forma simples - ele continuar√° v√°lido at√© expirar.
   * 
   * O logout efetivo acontece no frontend quando:
   * 1. O token √© removido do localStorage/sessionStorage
   * 2. O estado de autentica√ß√£o √© limpo
   * 3. O usu√°rio √© redirecionado para a p√°gina de login
   * 
   * Esta fun√ß√£o serve apenas para:
   * - Registrar o evento de logout nos logs
   * - Confirmar ao frontend que o logout foi "processado"
   * - Manter consist√™ncia na API REST
   * 
   * Para sistemas que precisam de logout imediato do servidor, seria necess√°rio:
   * - Implementar uma blacklist de tokens
   * - Usar refresh tokens
   * - Reduzir o tempo de expira√ß√£o dos tokens
   * 
   * @param req - Request autenticada (pode ou n√£o ter dados do usu√°rio)
   * @param res - Response confirmando o logout
   */
  static async logout(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      // EXTRAIR DADOS DO USU√ÅRIO SE DISPON√çVEIS
      // O usu√°rio pode estar ou n√£o autenticado no momento do logout
      // Se o token expirou, req.user ser√° undefined, mas ainda processamos o logout
      const user = req.user;

      // REGISTRAR EVENTO DE LOGOUT NOS LOGS
      // Importante para auditoria e monitoramento de seguran√ßa
      // Permite rastrear quando e quem fez logout
      if (user) {
        console.log('üëã Logout realizado para usu√°rio autenticado:', user.id, '-', user.email);
      } else {
        console.log('üëã Logout realizado (usu√°rio n√£o identificado ou token expirado)');
      }

      // INSTRU√á√ïES PARA O FRONTEND
      // Como estamos usando JWT stateless, o logout efetivo deve ser feito no frontend:
      // 1. Remover token do armazenamento local (localStorage.removeItem('token'))
      // 2. Limpar estado de autentica√ß√£o no contexto da aplica√ß√£o
      // 3. Redirecionar para p√°gina de login
      // 4. Invalidar dados em cache relacionados ao usu√°rio
      
      // Em um sistema com blacklist de tokens, aqui adicionar√≠amos o token √† blacklist:
      // await TokenBlacklist.add(req.headers.authorization?.replace('Bearer ', ''));

      // RESPOSTA DE CONFIRMA√á√ÉO DE LOGOUT
      // Confirma ao frontend que o logout foi processado com sucesso
      // Status 200 (OK) indica que a opera√ß√£o foi bem-sucedida
      res.status(HttpStatusCode.OK).json({
        success: true,
        message: 'Logout realizado com sucesso. Token deve ser removido do cliente.',
        data: {
          loggedOut: true,                    // Flag confirmando logout
          timestamp: new Date().toISOString() // Momento do logout
        }
      } as ApiResponse<{ loggedOut: boolean; timestamp: string }>);
    } catch (error: any) {
      // TRATAMENTO DE ERROS NO LOGOUT
      // Erros s√£o raros no logout, mas podem ocorrer por:
      // - Problemas de infraestrutura
      // - Falhas na grava√ß√£o de logs
      // - Problemas com blacklist (se implementada)
      console.error('‚ùå Erro inesperado durante logout:', error.message);
      console.error('Stack trace:', error.stack);
      
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor durante logout',
        errors: ['Falha ao processar logout']
      } as ApiResponse);
    }
  }
}
