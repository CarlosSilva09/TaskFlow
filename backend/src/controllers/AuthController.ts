/**
 * Controlador de Autentica√ß√£o
 * Gerencia todas as opera√ß√µes relacionadas √† autentica√ß√£o de usu√°rios
 * 
 * Funcionalidades:
 * - Registro de novos usu√°rios
 * - Login e gera√ß√£o de tokens JWT
 * - Visualiza√ß√£o e atualiza√ß√£o de perfil
 * - Altera√ß√£o de senha
 * - Valida√ß√µes de seguran√ßa
 */
import { Request, Response } from 'express';
import { UserModel } from '../models/User';
import { generateToken } from '../middleware/auth';
import { 
  CreateUserData, 
  LoginCredentials, 
  ChangePasswordData,
  ApiResponse, 
  UserResponse,
  HttpStatusCode 
} from '../types';
import { AuthenticatedRequest } from '../middleware/auth';

/**
 * Classe AuthController
 * Cont√©m m√©todos est√°ticos para opera√ß√µes de autentica√ß√£o
 * Utiliza padr√£o de controlador com m√©todos est√°ticos para simplicidade
 */
export class AuthController {
  /**
   * Registra um novo usu√°rio no sistema
   * Valida dados, verifica se o email j√° existe e cria novo usu√°rio
   * 
   * @param req - Request contendo dados do usu√°rio (name, email, password)
   * @param res - Response para retornar resultado da opera√ß√£o
   */
  static async register(req: Request, res: Response): Promise<void> {
    try {
      // Extrai dados do corpo da requisi√ß√£o
      const { name, email, password }: CreateUserData = req.body;
      
      console.log('üìù Tentativa de registro:', { 
        name, 
        email, 
        password: '***' // Esconde senha nos logs
      });

      // Valida√ß√£o: campos obrigat√≥rios
      if (!name || !email || !password) {
        console.log('‚ùå Campos obrigat√≥rios faltando');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Nome, email e senha s√£o obrigat√≥rios',
          errors: ['Campos obrigat√≥rios: name, email, password']
        } as ApiResponse);
        return;
      }

      // Valida√ß√£o: formato de email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        console.log('‚ùå Email inv√°lido:', email);
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Formato de email inv√°lido',
          errors: ['Email deve ter um formato v√°lido']
        } as ApiResponse);
        return;
      }

      // Valida√ß√£o de senha
      if (password.length < 6) {
        console.log('‚ùå Senha muito curta');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'A senha deve ter pelo menos 6 caracteres',
          errors: ['Senha deve ter no m√≠nimo 6 caracteres']
        } as ApiResponse);
        return;
      }

      // Valida√ß√£o de nome
      if (name.length < 3) {
        console.log('‚ùå Nome muito curto');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'O nome deve ter pelo menos 3 caracteres',
          errors: ['Nome deve ter no m√≠nimo 3 caracteres']
        } as ApiResponse);
        return;
      }

      // Verificar se o email j√° existe
      const existingUserByEmail = await UserModel.findByEmail(email);
      if (existingUserByEmail) {
        console.log('‚ùå Email j√° existe:', email);
        res.status(HttpStatusCode.CONFLICT).json({
          success: false,
          message: 'Este email j√° est√° cadastrado',
          errors: ['Email j√° em uso']
        } as ApiResponse);
        return;
      }

      // Criar usu√°rio
      const newUser = await UserModel.create(name, email, password);
      console.log('‚úÖ Usu√°rio criado com ID:', newUser.id);

      // Gerar token
      const token = generateToken({
        userId: newUser.id,
        name,
        email
      });

      console.log('‚úÖ Token gerado para usu√°rio:', newUser.id);

      // Resposta de sucesso
      res.status(HttpStatusCode.CREATED).json({
        success: true,
        message: 'Usu√°rio criado com sucesso',
        data: {
          token,
          user: {
            id: newUser.id,
            name,
            email
          }
        }
      } as ApiResponse<{ token: string; user: Partial<UserResponse> }>);
    } catch (error: any) {
      console.error('‚ùå Erro no registro:', error.message);
      
      // Tratamento de erros espec√≠ficos
      if (error.message.includes('j√° est√° cadastrado') || error.message.includes('j√° est√° em uso')) {
        res.status(HttpStatusCode.CONFLICT).json({
          success: false,
          message: error.message,
          errors: [error.message]
        } as ApiResponse);
        return;
      }

      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao criar usu√°rio']
      } as ApiResponse);
    }
  }

  /**
   * Autentica um usu√°rio (login)
   * @param req - Request com credenciais
   * @param res - Response
   */
  static async login(req: Request, res: Response): Promise<void> {
    try {
      const { email, password }: LoginCredentials = req.body;
      
      console.log('üîë Tentativa de login:', { 
        email, 
        password: '***' 
      });

      // Valida√ß√µes b√°sicas
      if (!email || !password) {
        console.log('‚ùå Campos obrigat√≥rios faltando no login');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Email e senha s√£o obrigat√≥rios',
          errors: ['Campos obrigat√≥rios: email, password']
        } as ApiResponse);
        return;
      }

      // Buscar usu√°rio
      const user = await UserModel.findByEmail(email);
      if (!user) {
        console.log('‚ùå Usu√°rio n√£o encontrado:', email);
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Email ou senha incorretos',
          errors: ['Credenciais inv√°lidas']
        } as ApiResponse);
        return;
      }

      // Verificar senha
      const isValidPassword = await UserModel.verifyPassword(password, user.password);
      if (!isValidPassword) {
        console.log('‚ùå Senha inv√°lida para:', email);
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Email ou senha incorretos',
          errors: ['Credenciais inv√°lidas']
        } as ApiResponse);
        return;
      }

      // Gerar token
      const token = generateToken({
        userId: user.id,
        name: user.name,
        email: user.email
      });

      console.log('‚úÖ Login realizado com sucesso:', user.id);

      // Resposta de sucesso
      res.status(HttpStatusCode.OK).json({
        success: true,
        message: 'Login realizado com sucesso',
        data: {
          token,
          user: {
            id: user.id,
            name: user.name,
            email: user.email,
            created_at: user.created_at,
            updated_at: user.updated_at
          }
        }
      } as ApiResponse<{ token: string; user: UserResponse }>);
    } catch (error: any) {
      console.error('‚ùå Erro no login:', error.message);
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao processar login']
      } as ApiResponse);
    }
  }

  /**
   * Obt√©m o perfil do usu√°rio autenticado
   * @param req - Request autenticada
   * @param res - Response
   */
  static async getProfile(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const user = req.user;
      
      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido']
        } as ApiResponse);
        return;
      }

      console.log('üë§ Perfil solicitado para usu√°rio:', user.id);

      // Buscar dados atualizados do usu√°rio
      const currentUser = await UserModel.findById(user.id);
      
      if (!currentUser) {
        res.status(HttpStatusCode.NOT_FOUND).json({
          success: false,
          message: 'Usu√°rio n√£o encontrado',
          errors: ['Usu√°rio n√£o existe']
        } as ApiResponse);
        return;
      }

      res.status(HttpStatusCode.OK).json({
        success: true,
        message: 'Perfil recuperado com sucesso',
        data: {
          user: currentUser
        }
      } as ApiResponse<{ user: UserResponse }>);
    } catch (error: any) {
      console.error('‚ùå Erro ao buscar perfil:', error.message);
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao buscar perfil']
      } as ApiResponse);
    }
  }

  /**
   * Altera a senha do usu√°rio
   * @param req - Request autenticada com dados da nova senha
   * @param res - Response
   */
  static async changePassword(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const user = req.user;
      const { currentPassword, newPassword }: ChangePasswordData = req.body;

      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido']
        } as ApiResponse);
        return;
      }

      console.log('üîê Altera√ß√£o de senha solicitada para usu√°rio:', user.id);

      // Valida√ß√µes
      if (!currentPassword || !newPassword) {
        console.log('‚ùå Senhas n√£o fornecidas');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Senha atual e nova senha s√£o obrigat√≥rias',
          errors: ['Campos obrigat√≥rios: currentPassword, newPassword']
        } as ApiResponse);
        return;
      }

      if (newPassword.length < 6) {
        console.log('‚ùå Nova senha muito curta');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'A nova senha deve ter pelo menos 6 caracteres',
          errors: ['Nova senha deve ter no m√≠nimo 6 caracteres']
        } as ApiResponse);
        return;
      }

      if (currentPassword === newPassword) {
        console.log('‚ùå Nova senha igual √† atual');
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'A nova senha deve ser diferente da senha atual',
          errors: ['Nova senha deve ser diferente da atual']
        } as ApiResponse);
        return;
      }

      // Alterar senha
      const success = await UserModel.changePassword(user.id, {
        currentPassword,
        newPassword
      });

      if (success) {
        console.log('‚úÖ Senha alterada com sucesso para usu√°rio:', user.id);
        res.status(HttpStatusCode.OK).json({
          success: true,
          message: 'Senha alterada com sucesso',
          data: {}
        } as ApiResponse);
      } else {
        console.log('‚ùå Falha ao alterar senha para usu√°rio:', user.id);
        res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
          success: false,
          message: 'Erro ao alterar senha',
          errors: ['Falha interna ao alterar senha']
        } as ApiResponse);
      }
    } catch (error: any) {
      console.error('‚ùå Erro ao alterar senha:', error.message);
      
      if (error.message === 'Senha atual incorreta') {
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Senha atual incorreta',
          errors: ['Senha atual n√£o confere']
        } as ApiResponse);
        return;
      }

      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao alterar senha']
      } as ApiResponse);
    }
  }

  /**
   * Atualiza o perfil do usu√°rio
   * @param req - Request autenticada com dados a serem atualizados
   * @param res - Response
   */
  static async updateProfile(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const user = req.user;
      const { name, email } = req.body;

      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Usu√°rio n√£o autenticado',
          errors: ['Token inv√°lido']
        } as ApiResponse);
        return;
      }

      console.log('üìù Atualiza√ß√£o de perfil solicitada para usu√°rio:', user.id);

      // Valida√ß√µes
      const updateData: Partial<{ name: string; email: string }> = {};

      if (name !== undefined) {
        if (name.length < 3) {
          res.status(HttpStatusCode.BAD_REQUEST).json({
            success: false,
            message: 'O nome deve ter pelo menos 3 caracteres',
            errors: ['Nome deve ter no m√≠nimo 3 caracteres']
          } as ApiResponse);
          return;
        }
        updateData.name = name;
      }

      if (email !== undefined) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
          res.status(HttpStatusCode.BAD_REQUEST).json({
            success: false,
            message: 'Formato de email inv√°lido',
            errors: ['Email deve ter um formato v√°lido']
          } as ApiResponse);
          return;
        }
        updateData.email = email;
      }

      if (Object.keys(updateData).length === 0) {
        res.status(HttpStatusCode.BAD_REQUEST).json({
          success: false,
          message: 'Nenhum campo v√°lido para atualizar',
          errors: ['Forne√ßa nome ou email para atualizar']
        } as ApiResponse);
        return;
      }

      // Atualizar perfil
      const success = await UserModel.update(user.id, updateData);

      if (success) {
        // Buscar dados atualizados
        const updatedUser = await UserModel.findById(user.id);
        
        console.log('‚úÖ Perfil atualizado com sucesso para usu√°rio:', user.id);
        res.status(HttpStatusCode.OK).json({
          success: true,
          message: 'Perfil atualizado com sucesso',
          data: {
            user: updatedUser
          }
        } as ApiResponse<{ user: UserResponse | undefined }>);
      } else {
        res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
          success: false,
          message: 'Erro ao atualizar perfil',
          errors: ['Falha interna ao atualizar perfil']
        } as ApiResponse);
      }
    } catch (error: any) {
      console.error('‚ùå Erro ao atualizar perfil:', error.message);
      
      if (error.message.includes('j√° est√° em uso')) {
        res.status(HttpStatusCode.CONFLICT).json({
          success: false,
          message: error.message,
          errors: [error.message]
        } as ApiResponse);
        return;
      }

      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao atualizar perfil']
      } as ApiResponse);
    }
  }

  /**
   * Valida o token atual do usu√°rio
   * @param req - Request autenticada
   * @param res - Response
   */
  static async validateToken(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const user = req.user;

      if (!user) {
        res.status(HttpStatusCode.UNAUTHORIZED).json({
          success: false,
          message: 'Token inv√°lido',
          errors: ['Token n√£o √© v√°lido']
        } as ApiResponse);
        return;
      }

      console.log('‚úÖ Token validado para usu√°rio:', user.id);

      res.status(HttpStatusCode.OK).json({
        success: true,
        message: 'Token v√°lido',
        data: {
          user: user,
          valid: true
        }
      } as ApiResponse<{ user: UserResponse; valid: boolean }>);
    } catch (error: any) {
      console.error('‚ùå Erro ao validar token:', error.message);
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao validar token']
      } as ApiResponse);
    }
  }

  /**
   * Logout (invalida o token no cliente)
   * @param req - Request autenticada
   * @param res - Response
   */
  static async logout(req: AuthenticatedRequest, res: Response): Promise<void> {
    try {
      const user = req.user;

      if (user) {
        console.log('üëã Logout realizado para usu√°rio:', user.id);
      }

      // Como estamos usando JWT stateless, o logout √© feito no frontend
      // Aqui podemos log a a√ß√£o ou implementar uma blacklist de tokens se necess√°rio
      
      res.status(HttpStatusCode.OK).json({
        success: true,
        message: 'Logout realizado com sucesso',
        data: {}
      } as ApiResponse);
    } catch (error: any) {
      console.error('‚ùå Erro no logout:', error.message);
      res.status(HttpStatusCode.INTERNAL_SERVER_ERROR).json({
        success: false,
        message: 'Erro interno do servidor',
        errors: ['Erro ao processar logout']
      } as ApiResponse);
    }
  }
}
